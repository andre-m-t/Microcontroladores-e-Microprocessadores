CCS PCM C Compiler, Version 5.076, 56587               31-mai-24 23:14

               Filename:   C:\Users\André\Desktop\Engenharia\6 Período\Microprocessadores e Microcontroladores\MICRO 2024\Projetos\c\10 - Andre Moreira Tavares\Programa 3\controleTemperatura.lst

               ROM used:   730 words (9%)
                           Largest free fragment is 2048
               RAM used:   22 (6%) at main() level
                           32 (9%) worst case
               Stack used: 4 locations (3 in main + 1 for interrupts)
               Stack size: 8

*
0000:  MOVLW  01
0001:  MOVWF  0A
0002:  GOTO   195
0003:  NOP
0004:  MOVWF  7F
0005:  SWAPF  03,W
0006:  CLRF   03
0007:  MOVWF  21
0008:  MOVF   0A,W
0009:  MOVWF  20
000A:  CLRF   0A
000B:  MOVF   04,W
000C:  MOVWF  22
000D:  MOVF   77,W
000E:  MOVWF  23
000F:  MOVF   78,W
0010:  MOVWF  24
0011:  MOVF   79,W
0012:  MOVWF  25
0013:  MOVF   7A,W
0014:  MOVWF  26
0015:  BCF    03.7
0016:  BCF    03.5
0017:  BTFSS  0B.5
0018:  GOTO   01B
0019:  BTFSC  0B.2
001A:  GOTO   02C
001B:  MOVF   22,W
001C:  MOVWF  04
001D:  MOVF   23,W
001E:  MOVWF  77
001F:  MOVF   24,W
0020:  MOVWF  78
0021:  MOVF   25,W
0022:  MOVWF  79
0023:  MOVF   26,W
0024:  MOVWF  7A
0025:  MOVF   20,W
0026:  MOVWF  0A
0027:  SWAPF  21,W
0028:  MOVWF  03
0029:  SWAPF  7F,F
002A:  SWAPF  7F,W
002B:  RETFIE
002C:  BCF    0A.3
002D:  BCF    0A.4
002E:  GOTO   02F
.................... #include <controleTemperatura.h> 
.................... #include <16F877A.h> 
.................... //////////// Standard Header file for the PIC16F877A device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2014 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F877A 
*
00EE:  CLRF   37
00EF:  MOVF   04,W
00F0:  MOVWF  36
00F1:  BCF    37.0
00F2:  BTFSC  03.7
00F3:  BSF    37.0
00F4:  SWAPF  30,W
00F5:  IORLW  F0
00F6:  MOVWF  32
00F7:  ADDWF  32,F
00F8:  ADDLW  E2
00F9:  MOVWF  33
00FA:  ADDLW  32
00FB:  MOVWF  35
00FC:  MOVF   30,W
00FD:  ANDLW  0F
00FE:  ADDWF  33,F
00FF:  ADDWF  33,F
0100:  ADDWF  35,F
0101:  ADDLW  E9
0102:  MOVWF  34
0103:  ADDWF  34,F
0104:  ADDWF  34,F
0105:  SWAPF  2F,W
0106:  ANDLW  0F
0107:  ADDWF  34,F
0108:  ADDWF  35,F
0109:  RLF    34,F
010A:  RLF    35,F
010B:  COMF   35,F
010C:  RLF    35,F
010D:  MOVF   2F,W
010E:  ANDLW  0F
010F:  ADDWF  35,F
0110:  RLF    32,F
0111:  MOVLW  07
0112:  MOVWF  31
0113:  MOVLW  0A
0114:  ADDWF  35,F
0115:  DECF   34,F
0116:  BTFSS  03.0
0117:  GOTO   114
0118:  ADDWF  34,F
0119:  DECF   33,F
011A:  BTFSS  03.0
011B:  GOTO   118
011C:  ADDWF  33,F
011D:  DECF   32,F
011E:  BTFSS  03.0
011F:  GOTO   11C
0120:  ADDWF  32,F
0121:  DECF   31,F
0122:  BTFSS  03.0
0123:  GOTO   120
0124:  MOVLW  31
0125:  MOVWF  04
0126:  BCF    03.7
0127:  MOVLW  07
0128:  ANDWF  36,W
0129:  BCF    36.6
012A:  ADDWF  04,F
012B:  MOVLW  35
012C:  SUBWF  04,W
012D:  BTFSC  03.2
012E:  BSF    36.6
012F:  MOVF   00,W
0130:  MOVWF  77
0131:  BTFSS  03.2
0132:  GOTO   13B
0133:  BTFSC  36.6
0134:  GOTO   13B
0135:  BTFSC  36.4
0136:  GOTO   14D
0137:  BTFSC  36.3
0138:  GOTO   13B
0139:  MOVLW  20
013A:  GOTO   13E
013B:  BSF    36.3
013C:  BCF    36.4
013D:  MOVLW  30
013E:  ADDWF  77,F
013F:  CLRF   30
0140:  MOVF   04,W
0141:  MOVWF  2F
0142:  BCF    30.0
0143:  BTFSC  03.7
0144:  BSF    30.0
0145:  MOVF   77,W
0146:  MOVWF  38
0147:  CALL   0BE
0148:  MOVF   2F,W
0149:  MOVWF  04
014A:  BCF    03.7
014B:  BTFSC  30.0
014C:  BSF    03.7
014D:  INCF   04,F
014E:  BTFSS  36.6
014F:  GOTO   12B
0150:  RETURN
....................  
.................... #list 
....................  
.................... #device ADC=10 
....................  
.................... #FUSES PUT                      //Power Up Timer 
.................... #FUSES NOBROWNOUT               //No brownout reset 
.................... #FUSES LVP                      //Low Voltage Programming on B3(PIC16) or B5(PIC18) 
.................... #FUSES NOCPD                    //No EE protection 
.................... #FUSES NOWRT                    //Program memory not write protected 
.................... #FUSES NOPROTECT                //Code not protected from reading 
....................  
.................... #use delay(crystal=8MHz) 
*
008B:  MOVLW  2F
008C:  MOVWF  04
008D:  BCF    03.7
008E:  MOVF   00,W
008F:  BTFSC  03.2
0090:  GOTO   09E
0091:  MOVLW  02
0092:  MOVWF  78
0093:  CLRF   77
0094:  DECFSZ 77,F
0095:  GOTO   094
0096:  DECFSZ 78,F
0097:  GOTO   093
0098:  MOVLW  97
0099:  MOVWF  77
009A:  DECFSZ 77,F
009B:  GOTO   09A
009C:  DECFSZ 00,F
009D:  GOTO   091
009E:  RETURN
....................  
....................  
.................... #use fixed_io(c_outputs=PIN_C2, PIN_C1) 
....................  
.................... #define  B_LIGA   PIN_B0 
.................... #define  B_DESL   PIN_B1 
.................... #define  HEATER   PIN_C2 
.................... #define  FAN      PIN_C1 
....................  
.................... #include <lcd_8bits.c> 
.................... /*========================================= 
.................... 8-BIT LCD DRIVER FOR PIC16F877A CCSC 
.................... ==========================================*/ 
.................... /////////////////////////////////////////////////////////////////// 
.................... // CCS C Compiler 
.................... // LCD 16x2 
.................... // 
.................... // by Nisar Ahmed 
.................... // 2009/03/27 
.................... ////////////////////////////////////////////////////////////////// 
.................... //#include <16F877.h>                           // PIC16F877 header file 
.................... //#use delay(clock=4000000)                       // for 4Mhz crystal 
.................... //#fuses XT, NOWDT, NOPROTECT, NOLVP              // for debug mode 
....................  
.................... #define PORT_A                  0               // define for function output() 
.................... #define PORT_B                  1 
.................... #define PORT_C                  2 
.................... #define PORT_D                  3 
.................... #define PORT_E                  4 
....................  
.................... #define NCHAR_PER_LINE          16              // max char numbers per line 
.................... #define LCD_RS                  PIN_E0 
.................... #define LCD_RW                  PIN_E2 
.................... #define LCD_E                   PIN_E1 
.................... #define LCD_DAT                 PORT_D 
.................... //===========================================================================// 
.................... //--- output() -----------------///////////////////////////////////////////////  
.................... //lcd data bus output 
.................... void output(int8 port, int8 dat) 
.................... { 
....................         switch(port) 
*
0038:  MOVF   39,W
0039:  XORLW  00
003A:  BTFSC  03.2
003B:  GOTO   049
003C:  XORLW  01
003D:  BTFSC  03.2
003E:  GOTO   04F
003F:  XORLW  03
0040:  BTFSC  03.2
0041:  GOTO   055
0042:  XORLW  01
0043:  BTFSC  03.2
0044:  GOTO   05C
0045:  XORLW  07
0046:  BTFSC  03.2
0047:  GOTO   062
0048:  GOTO   06A
....................                 { 
....................                 case PORT_A: output_a(dat);      break; 
0049:  BSF    03.5
004A:  CLRF   05
004B:  BCF    03.5
004C:  MOVF   3A,W
004D:  MOVWF  05
004E:  GOTO   06A
....................                 case PORT_B: output_b(dat);      break; 
004F:  BSF    03.5
0050:  CLRF   06
0051:  BCF    03.5
0052:  MOVF   3A,W
0053:  MOVWF  06
0054:  GOTO   06A
....................                 case PORT_C: output_c(dat);      break; 
0055:  MOVLW  F9
0056:  BSF    03.5
0057:  MOVWF  07
0058:  BCF    03.5
0059:  MOVF   3A,W
005A:  MOVWF  07
005B:  GOTO   06A
....................                 case PORT_D: output_d(dat);      break; 
005C:  BSF    03.5
005D:  CLRF   08
005E:  BCF    03.5
005F:  MOVF   3A,W
0060:  MOVWF  08
0061:  GOTO   06A
....................                 case PORT_E: output_e(dat);      break; 
0062:  BSF    03.5
0063:  BCF    09.0
0064:  BCF    09.1
0065:  BCF    09.2
0066:  BCF    03.5
0067:  MOVF   3A,W
0068:  MOVWF  09
0069:  GOTO   06A
....................                 default :       //??? port maybe error! 
....................                         break; 
....................                 } 
006A:  RETURN
.................... }//end output() 
.................... //===========================================================================// 
.................... //--- lcd_write_cmd() -----------//////////////////////////////////////////////  
.................... void lcd_write_cmd(int8 cmd) 
.................... { 
....................    delay_us(40); 
006B:  MOVLW  1A
006C:  MOVWF  77
006D:  DECFSZ 77,F
006E:  GOTO   06D
006F:  NOP
....................    output_low(LCD_RS); 
0070:  BSF    03.5
0071:  BCF    09.0
0072:  BCF    03.5
0073:  BCF    09.0
....................    output_low(LCD_RW); 
0074:  BSF    03.5
0075:  BCF    09.2
0076:  BCF    03.5
0077:  BCF    09.2
....................    output(LCD_DAT, cmd); 
0078:  MOVLW  03
0079:  MOVWF  39
007A:  MOVF   33,W
007B:  MOVWF  3A
007C:  CALL   038
....................     
....................    output_high(LCD_E); 
007D:  BSF    03.5
007E:  BCF    09.1
007F:  BCF    03.5
0080:  BSF    09.1
....................    delay_us(40); 
0081:  MOVLW  1A
0082:  MOVWF  77
0083:  DECFSZ 77,F
0084:  GOTO   083
0085:  NOP
....................    output_low(LCD_E); 
0086:  BSF    03.5
0087:  BCF    09.1
0088:  BCF    03.5
0089:  BCF    09.1
008A:  RETURN
.................... }//end lcd_write_cmd() 
.................... //===========================================================================// 
.................... //--- lcd_write_dat() ------------/////////////////////////////////////////////  
.................... void lcd_write_dat(int8 dat) 
.................... { 
....................    delay_us(40); 
*
00BE:  MOVLW  1A
00BF:  MOVWF  77
00C0:  DECFSZ 77,F
00C1:  GOTO   0C0
00C2:  NOP
....................    output_high(LCD_RS); 
00C3:  BSF    03.5
00C4:  BCF    09.0
00C5:  BCF    03.5
00C6:  BSF    09.0
....................    output_low(LCD_RW); 
00C7:  BSF    03.5
00C8:  BCF    09.2
00C9:  BCF    03.5
00CA:  BCF    09.2
....................    output(LCD_DAT, dat); 
00CB:  MOVLW  03
00CC:  MOVWF  39
00CD:  MOVF   38,W
00CE:  MOVWF  3A
00CF:  CALL   038
....................     
....................    output_high(LCD_E); 
00D0:  BSF    03.5
00D1:  BCF    09.1
00D2:  BCF    03.5
00D3:  BSF    09.1
....................    delay_us(40); 
00D4:  MOVLW  1A
00D5:  MOVWF  77
00D6:  DECFSZ 77,F
00D7:  GOTO   0D6
00D8:  NOP
....................    output_low(LCD_E); 
00D9:  BSF    03.5
00DA:  BCF    09.1
00DB:  BCF    03.5
00DC:  BCF    09.1
00DD:  RETURN
.................... }//end lcd_write_dat() 
.................... //===========================================================================// 
.................... //--- lcd_init() ------------//////////////////////////////////////////////////  
.................... void lcd_init(void) 
.................... { 
....................    output_low(LCD_E);              // Let LCD E line low 
*
009F:  BSF    03.5
00A0:  BCF    09.1
00A1:  BCF    03.5
00A2:  BCF    09.1
....................     
....................    lcd_write_cmd(0x38);            // LCD 16x2, 5x7, 8bits data 
00A3:  MOVLW  38
00A4:  MOVWF  33
00A5:  CALL   06B
....................    delay_ms(15); 
00A6:  MOVLW  0F
00A7:  MOVWF  2F
00A8:  CALL   08B
....................    lcd_write_cmd(0x01);            // Clear LCD display 
00A9:  MOVLW  01
00AA:  MOVWF  33
00AB:  CALL   06B
....................    delay_ms(10); 
00AC:  MOVLW  0A
00AD:  MOVWF  2F
00AE:  CALL   08B
....................    lcd_write_cmd(0x0C);            // Open display & current 
00AF:  MOVLW  0C
00B0:  MOVWF  33
00B1:  CALL   06B
....................    delay_ms(10); 
00B2:  MOVLW  0A
00B3:  MOVWF  2F
00B4:  CALL   08B
....................    lcd_write_cmd(0x06);            // Window fixed 
00B5:  MOVLW  06
00B6:  MOVWF  33
00B7:  CALL   06B
....................    delay_ms(10); 
00B8:  MOVLW  0A
00B9:  MOVWF  2F
00BA:  CALL   08B
00BB:  BCF    0A.3
00BC:  BCF    0A.4
00BD:  GOTO   1BE (RETURN)
.................... }//end lcd_init() 
.................... //===========================================================================// 
.................... //--- lcd_display_char() ------------////////////////////////////////////////// 
.................... void lcd_display_char(int8 line, int8 pos, int8 ch) 
.................... { 
....................         int8 tmp; 
....................  
....................         line = (line==0) ? 0 : 1; 
....................         pos  = (pos >NCHAR_PER_LINE) ? NCHAR_PER_LINE : pos; 
....................  
....................         tmp = 0x80 + 0x40*line + pos; 
....................         lcd_write_cmd(tmp); 
....................         lcd_write_dat(ch); 
.................... }//end lcd_display_char() 
.................... //===========================================================================// 
.................... //--- lcd_display_str() ------------///////////////////////////////////////////  
.................... void lcd_display_str(int8 line, char str[]) 
.................... { 
....................      int8 i; 
....................  
....................         for(i=0; i<NCHAR_PER_LINE; i++) 
....................             { 
....................                 lcd_display_char(line, i, ' '); 
....................                 } 
....................         for(i=0; i<NCHAR_PER_LINE; i++) 
....................                 { 
....................                 if(str[i] == '\0') break; 
....................                 lcd_display_char(line, i, str[i]); 
....................                 } 
.................... }//end lcd_display_str() 
.................... //===========================================================================// 
.................... //--- lcd_gotoxy(coluna linha) -----///////////////////////////////////////////  
.................... void lcd_gotoxy(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    unsigned int8 address; 
....................     
....................    if(y != 1) 
*
00DE:  DECFSZ 30,W
00DF:  GOTO   0E1
00E0:  GOTO   0E4
....................       address = 0x40; 
00E1:  MOVLW  40
00E2:  MOVWF  31
00E3:  GOTO   0E5
....................    else 
....................       address = 0x00; 
00E4:  CLRF   31
....................       
....................    address += (x-1);    
00E5:  MOVLW  01
00E6:  SUBWF  2F,W
00E7:  ADDWF  31,F
....................    lcd_write_cmd(0x80|address); 
00E8:  MOVF   31,W
00E9:  IORLW  80
00EA:  MOVWF  32
00EB:  MOVWF  33
00EC:  CALL   06B
00ED:  RETURN
.................... } 
.................... //===========================================================================// 
....................  
.................... //constantes 
.................... #define canal_temp 0 
.................... #define canal_pot  1 
....................  
....................  
.................... //variaveis globais 
.................... int1 fim_tempo = 0; 
.................... int8 contador = 250;  //1ms*250 = 250ms 
.................... int1 processo = 0; 
.................... int1 ligar_fan = 0; 
.................... int16 histerese = 10; 
.................... int16 potenciometro, temperatura; 
.................... //declaracao de funcoes 
.................... void leiturasAnalogicas(); 
....................  
....................  
.................... //espaco reservado para interrupcao 
.................... #INT_TIMER0 
.................... void  TIMER0_isr(void)  
.................... { 
....................    contador--; 
*
002F:  DECFSZ 28,F
....................    if(contador == 0){ 
0030:  GOTO   034
....................       fim_tempo = 1; 
0031:  BSF    27.0
....................       contador = 250; 
0032:  MOVLW  FA
0033:  MOVWF  28
....................    }    
0034:  BCF    0B.2
0035:  BCF    0A.3
0036:  BCF    0A.4
0037:  GOTO   01B
.................... } 
.................... //fim espaco reservado 
....................  
.................... void main() 
*
0195:  MOVF   03,W
0196:  ANDLW  1F
0197:  MOVWF  03
0198:  BCF    27.0
0199:  MOVLW  FA
019A:  MOVWF  28
019B:  BCF    27.1
019C:  BCF    27.2
019D:  CLRF   2A
019E:  MOVLW  0A
019F:  MOVWF  29
01A0:  BSF    03.5
01A1:  BSF    1F.0
01A2:  BSF    1F.1
01A3:  BSF    1F.2
01A4:  BCF    1F.3
01A5:  MOVLW  07
01A6:  MOVWF  1C
01A7:  BCF    03.7
.................... { 
....................    //ENTRADAS ANALOGICAS 
....................    setup_adc_ports(AN0_AN1_AN3); 
01A8:  BCF    1F.0
01A9:  BCF    1F.1
01AA:  BSF    1F.2
01AB:  BCF    1F.3
....................    setup_adc(ADC_CLOCK_INTERNAL); 
01AC:  BCF    1F.6
01AD:  BCF    03.5
01AE:  BSF    1F.6
01AF:  BSF    1F.7
01B0:  BSF    03.5
01B1:  BSF    1F.7
01B2:  BCF    03.5
01B3:  BSF    1F.0
....................    setup_timer_0(RTCC_INTERNAL|RTCC_DIV_8|RTCC_8_BIT);      //1,0 ms overflow 
01B4:  BSF    03.5
01B5:  MOVF   01,W
01B6:  ANDLW  C0
01B7:  IORLW  02
01B8:  MOVWF  01
....................  
....................    //INTERRUPCAO 
....................    enable_interrupts(INT_TIMER0); 
01B9:  BCF    03.5
01BA:  BSF    0B.5
....................    enable_interrupts(GLOBAL); 
01BB:  MOVLW  C0
01BC:  IORWF  0B,F
....................     
....................    //LCD 
....................    lcd_init(); 
01BD:  GOTO   09F
....................    printf(lcd_write_dat,"Sp:");//setpoint 
01BE:  MOVLW  53
01BF:  MOVWF  38
01C0:  CALL   0BE
01C1:  MOVLW  70
01C2:  MOVWF  38
01C3:  CALL   0BE
01C4:  MOVLW  3A
01C5:  MOVWF  38
01C6:  CALL   0BE
....................    lcd_gotoxy(1,2); 
01C7:  MOVLW  01
01C8:  MOVWF  2F
01C9:  MOVLW  02
01CA:  MOVWF  30
01CB:  CALL   0DE
....................    printf(lcd_write_dat,"Tp:");//temperatura 
01CC:  MOVLW  54
01CD:  MOVWF  38
01CE:  CALL   0BE
01CF:  MOVLW  70
01D0:  MOVWF  38
01D1:  CALL   0BE
01D2:  MOVLW  3A
01D3:  MOVWF  38
01D4:  CALL   0BE
....................    lcd_gotoxy(9,1); 
01D5:  MOVLW  09
01D6:  MOVWF  2F
01D7:  MOVLW  01
01D8:  MOVWF  30
01D9:  CALL   0DE
....................    printf(lcd_write_dat,"Fn:");//fan 
01DA:  MOVLW  46
01DB:  MOVWF  38
01DC:  CALL   0BE
01DD:  MOVLW  6E
01DE:  MOVWF  38
01DF:  CALL   0BE
01E0:  MOVLW  3A
01E1:  MOVWF  38
01E2:  CALL   0BE
....................    lcd_gotoxy(9,2); 
01E3:  MOVLW  09
01E4:  MOVWF  2F
01E5:  MOVLW  02
01E6:  MOVWF  30
01E7:  CALL   0DE
....................    printf(lcd_write_dat,"Ht:");//heater 
01E8:  MOVLW  48
01E9:  MOVWF  38
01EA:  CALL   0BE
01EB:  MOVLW  74
01EC:  MOVWF  38
01ED:  CALL   0BE
01EE:  MOVLW  3A
01EF:  MOVWF  38
01F0:  CALL   0BE
....................    lcd_gotoxy(15,2); 
01F1:  MOVLW  0F
01F2:  MOVWF  2F
01F3:  MOVLW  02
01F4:  MOVWF  30
01F5:  CALL   0DE
....................    printf(lcd_write_dat,"Of");//processo 
01F6:  MOVLW  4F
01F7:  MOVWF  38
01F8:  CALL   0BE
01F9:  MOVLW  66
01FA:  MOVWF  38
01FB:  CALL   0BE
....................    lcd_gotoxy(12,1); 
01FC:  MOVLW  0C
01FD:  MOVWF  2F
01FE:  MOVLW  01
01FF:  MOVWF  30
0200:  CALL   0DE
....................    printf(lcd_write_dat,"Of");//fan 
0201:  MOVLW  4F
0202:  MOVWF  38
0203:  CALL   0BE
0204:  MOVLW  66
0205:  MOVWF  38
0206:  CALL   0BE
....................    lcd_gotoxy(12,2); 
0207:  MOVLW  0C
0208:  MOVWF  2F
0209:  MOVLW  02
020A:  MOVWF  30
020B:  CALL   0DE
....................    printf(lcd_write_dat,"Of");//heater 
020C:  MOVLW  4F
020D:  MOVWF  38
020E:  CALL   0BE
020F:  MOVLW  66
0210:  MOVWF  38
0211:  CALL   0BE
....................  
....................  
....................    while(TRUE) 
....................    { 
....................       if(fim_tempo) 
0212:  BTFSC  27.0
....................          leiturasAnalogicas(); 
0213:  GOTO   151
....................       if(input_state(B_LIGA) == 0) 
0214:  BTFSS  06.0
....................          processo = 1; 
0215:  BSF    27.1
....................       if(input_state(B_DESL) == 0) {   
0216:  BTFSC  06.1
0217:  GOTO   223
....................          processo = 0; 
0218:  BCF    27.1
....................          ligar_fan = 0; 
0219:  BCF    27.2
....................          output_low(HEATER); 
021A:  MOVLW  F9
021B:  BSF    03.5
021C:  MOVWF  07
021D:  BCF    03.5
021E:  BCF    07.2
....................          output_low(FAN); 
021F:  BSF    03.5
0220:  MOVWF  07
0221:  BCF    03.5
0222:  BCF    07.1
....................       } 
....................       if(processo){ 
0223:  BTFSS  27.1
0224:  GOTO   2B7
....................          lcd_gotoxy(15,2); 
0225:  MOVLW  0F
0226:  MOVWF  2F
0227:  MOVLW  02
0228:  MOVWF  30
0229:  CALL   0DE
....................          printf(lcd_write_dat,"On");//processo 
022A:  MOVLW  4F
022B:  MOVWF  38
022C:  CALL   0BE
022D:  MOVLW  6E
022E:  MOVWF  38
022F:  CALL   0BE
....................          //temperatura menor que a setada 
....................          if((temperatura+histerese) < potenciometro){ 
0230:  MOVF   29,W
0231:  ADDWF  2D,W
0232:  MOVWF  2F
0233:  MOVF   2E,W
0234:  MOVWF  30
0235:  MOVF   2A,W
0236:  BTFSC  03.0
0237:  INCFSZ 2A,W
0238:  ADDWF  30,F
0239:  MOVF   30,W
023A:  SUBWF  2C,W
023B:  BTFSS  03.0
023C:  GOTO   253
023D:  BTFSS  03.2
023E:  GOTO   243
023F:  MOVF   2B,W
0240:  SUBWF  2F,W
0241:  BTFSC  03.0
0242:  GOTO   253
....................             output_high(HEATER); 
0243:  MOVLW  F9
0244:  BSF    03.5
0245:  MOVWF  07
0246:  BCF    03.5
0247:  BSF    07.2
....................             lcd_gotoxy(12,2); 
0248:  MOVLW  0C
0249:  MOVWF  2F
024A:  MOVLW  02
024B:  MOVWF  30
024C:  CALL   0DE
....................             printf(lcd_write_dat,"On");//heater 
024D:  MOVLW  4F
024E:  MOVWF  38
024F:  CALL   0BE
0250:  MOVLW  6E
0251:  MOVWF  38
0252:  CALL   0BE
....................          } 
....................          //temperatura maior que a setada    
....................          if((temperatura-histerese) > potenciometro){ 
0253:  MOVF   29,W
0254:  SUBWF  2D,W
0255:  MOVWF  2F
0256:  MOVF   2E,W
0257:  MOVWF  30
0258:  MOVF   2A,W
0259:  BTFSS  03.0
025A:  INCFSZ 2A,W
025B:  SUBWF  30,F
025C:  MOVF   2C,W
025D:  SUBWF  30,W
025E:  BTFSS  03.0
025F:  GOTO   276
0260:  BTFSS  03.2
0261:  GOTO   266
0262:  MOVF   2F,W
0263:  SUBWF  2B,W
0264:  BTFSC  03.0
0265:  GOTO   276
....................             output_low(HEATER); 
0266:  MOVLW  F9
0267:  BSF    03.5
0268:  MOVWF  07
0269:  BCF    03.5
026A:  BCF    07.2
....................             lcd_gotoxy(12,2); 
026B:  MOVLW  0C
026C:  MOVWF  2F
026D:  MOVLW  02
026E:  MOVWF  30
026F:  CALL   0DE
....................             printf(lcd_write_dat,"Of");//heater 
0270:  MOVLW  4F
0271:  MOVWF  38
0272:  CALL   0BE
0273:  MOVLW  66
0274:  MOVWF  38
0275:  CALL   0BE
....................          } 
....................          if(ligar_fan){ 
0276:  BTFSS  27.2
0277:  GOTO   293
....................             output_high(FAN); 
0278:  MOVLW  F9
0279:  BSF    03.5
027A:  MOVWF  07
027B:  BCF    03.5
027C:  BSF    07.1
....................             lcd_gotoxy(12,1); 
027D:  MOVLW  0C
027E:  MOVWF  2F
027F:  MOVLW  01
0280:  MOVWF  30
0281:  CALL   0DE
....................             printf(lcd_write_dat,"On");//fan 
0282:  MOVLW  4F
0283:  MOVWF  38
0284:  CALL   0BE
0285:  MOVLW  6E
0286:  MOVWF  38
0287:  CALL   0BE
....................             if(temperatura <= potenciometro) 
0288:  MOVF   2E,W
0289:  SUBWF  2C,W
028A:  BTFSS  03.0
028B:  GOTO   292
028C:  BTFSS  03.2
028D:  GOTO   291
028E:  MOVF   2D,W
028F:  SUBWF  2B,W
0290:  BTFSC  03.0
....................                ligar_fan = 0; 
0291:  BCF    27.2
....................          } 
0292:  GOTO   2A3
....................          else{ 
....................             output_low(FAN); 
0293:  MOVLW  F9
0294:  BSF    03.5
0295:  MOVWF  07
0296:  BCF    03.5
0297:  BCF    07.1
....................             lcd_gotoxy(12,1); 
0298:  MOVLW  0C
0299:  MOVWF  2F
029A:  MOVLW  01
029B:  MOVWF  30
029C:  CALL   0DE
....................             printf(lcd_write_dat,"Of");//fan 
029D:  MOVLW  4F
029E:  MOVWF  38
029F:  CALL   0BE
02A0:  MOVLW  66
02A1:  MOVWF  38
02A2:  CALL   0BE
....................          } 
....................          //condicao para ligar o fan     
....................          if((temperatura-20) > potenciometro) 
02A3:  MOVLW  14
02A4:  SUBWF  2D,W
02A5:  MOVWF  2F
02A6:  MOVF   2E,W
02A7:  MOVWF  30
02A8:  MOVLW  00
02A9:  BTFSS  03.0
02AA:  MOVLW  01
02AB:  SUBWF  30,F
02AC:  MOVF   2C,W
02AD:  SUBWF  30,W
02AE:  BTFSS  03.0
02AF:  GOTO   2B6
02B0:  BTFSS  03.2
02B1:  GOTO   2B5
02B2:  MOVF   2F,W
02B3:  SUBWF  2B,W
02B4:  BTFSS  03.0
....................             ligar_fan = 1; 
02B5:  BSF    27.2
....................           
....................       }else{ 
02B6:  GOTO   2D8
....................          lcd_gotoxy(15,2); 
02B7:  MOVLW  0F
02B8:  MOVWF  2F
02B9:  MOVLW  02
02BA:  MOVWF  30
02BB:  CALL   0DE
....................          printf(lcd_write_dat,"Of");//processo 
02BC:  MOVLW  4F
02BD:  MOVWF  38
02BE:  CALL   0BE
02BF:  MOVLW  66
02C0:  MOVWF  38
02C1:  CALL   0BE
....................          lcd_gotoxy(12,1); 
02C2:  MOVLW  0C
02C3:  MOVWF  2F
02C4:  MOVLW  01
02C5:  MOVWF  30
02C6:  CALL   0DE
....................          printf(lcd_write_dat,"Of");//fan 
02C7:  MOVLW  4F
02C8:  MOVWF  38
02C9:  CALL   0BE
02CA:  MOVLW  66
02CB:  MOVWF  38
02CC:  CALL   0BE
....................          lcd_gotoxy(12,2); 
02CD:  MOVLW  0C
02CE:  MOVWF  2F
02CF:  MOVLW  02
02D0:  MOVWF  30
02D1:  CALL   0DE
....................          printf(lcd_write_dat,"Of");//heater 
02D2:  MOVLW  4F
02D3:  MOVWF  38
02D4:  CALL   0BE
02D5:  MOVLW  66
02D6:  MOVWF  38
02D7:  CALL   0BE
....................       } 
02D8:  GOTO   212
....................       //TODO: User Code 
....................    } 
....................  
.................... } 
....................  
02D9:  SLEEP
.................... void leiturasAnalogicas(){ 
....................    fim_tempo = 0; 
*
0151:  BCF    27.0
....................    //adc temperatura 
....................    set_adc_channel(canal_temp); 
0152:  MOVLW  00
0153:  MOVWF  78
0154:  MOVF   1F,W
0155:  ANDLW  C7
0156:  IORWF  78,W
0157:  MOVWF  1F
....................    delay_us(40); 
0158:  MOVLW  1A
0159:  MOVWF  77
015A:  DECFSZ 77,F
015B:  GOTO   15A
015C:  NOP
....................    temperatura = read_adc(); 
015D:  BSF    1F.2
015E:  BTFSC  1F.2
015F:  GOTO   15E
0160:  BSF    03.5
0161:  MOVF   1E,W
0162:  BCF    03.5
0163:  MOVWF  2D
0164:  MOVF   1E,W
0165:  MOVWF  2E
....................    lcd_gotoxy(4,2); 
0166:  MOVLW  04
0167:  MOVWF  2F
0168:  MOVLW  02
0169:  MOVWF  30
016A:  CALL   0DE
....................    printf(lcd_write_dat,"%4lu",temperatura);//setpoint 
016B:  MOVLW  01
016C:  MOVWF  04
016D:  MOVF   2E,W
016E:  MOVWF  30
016F:  MOVF   2D,W
0170:  MOVWF  2F
0171:  CALL   0EE
....................    //adc potenciometro 
....................    set_adc_channel(canal_pot); 
0172:  MOVLW  08
0173:  MOVWF  78
0174:  MOVF   1F,W
0175:  ANDLW  C7
0176:  IORWF  78,W
0177:  MOVWF  1F
....................    delay_us(40); 
0178:  MOVLW  1A
0179:  MOVWF  77
017A:  DECFSZ 77,F
017B:  GOTO   17A
017C:  NOP
....................    potenciometro = read_adc(); 
017D:  BSF    1F.2
017E:  BTFSC  1F.2
017F:  GOTO   17E
0180:  BSF    03.5
0181:  MOVF   1E,W
0182:  BCF    03.5
0183:  MOVWF  2B
0184:  MOVF   1E,W
0185:  MOVWF  2C
....................    lcd_gotoxy(4,1); 
0186:  MOVLW  04
0187:  MOVWF  2F
0188:  MOVLW  01
0189:  MOVWF  30
018A:  CALL   0DE
....................    printf(lcd_write_dat,"%4lu",potenciometro);//setpoint 
018B:  MOVLW  01
018C:  MOVWF  04
018D:  MOVF   2C,W
018E:  MOVWF  30
018F:  MOVF   2B,W
0190:  MOVWF  2F
0191:  CALL   0EE
....................    return; 
0192:  BCF    0A.3
0193:  BCF    0A.4
0194:  GOTO   214 (RETURN)
.................... } 
....................  

Configuration Fuses:
   Word  1: 3FB2   HS NOWDT PUT NOBROWNOUT LVP NOCPD NOWRT NODEBUG NOPROTECT
